AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Dev2 Jenkins SAM Deployment
#Parameter Configuration Required to deploy Lambdas:
Parameters:
  STAGE:
    Type: String
    Default: dev2
  S3Bucket:
    Type: String
    Default: "jenkins-dev2-deployment"
  Environment:
    Type: String
    Default: "DEV2"
Resources:
#IAM Role Required for Lambdas to function Properly
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:     
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: PublishVersion
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action: ['lambda:PublishVersion', 'lambda:CreateAlias', 'lambda:GetAlias', 'lambda:ListAliases', 'lambda:UpdateAlias']
              Resource: '*'
            - Effect: Allow
              Action:
                - s3:Get*
              Resource: '*'

  ENVAddTagToPatientObjects:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: ENV_AddTagToPatientObjects
      Handler: index.handler
      Runtime: nodejs14.x
      CodeUri:
        Bucket:
          Ref: S3Bucket
        Key: lambdas/ENV_AddTagToPatientObjects.zip
        Version: <ENV_AddTagToPatientObjects-s3-version>
      Description: Jenkins Dev2 Deployment
      MemorySize: 1024
      Timeout: 300
      Role: 'arn:aws:iam::491655376147:role/dev_exportpatientprocedure_functionrole'
      Events:
        BucketEvent1:
          Type: S3
          Properties:
            Bucket:
              Ref: Bucket1
            Events:
              - 's3:ObjectCreated:*'
        BucketEvent2:
          Type: S3
          Properties:
            Bucket:
              Ref: Bucket2
            Events:
              - 's3:ObjectCreated:*'
      VpcConfig:
        SecurityGroupIds:
          - sg-005a73d593a28e2a0
        SubnetIds:
          - subnet-06a08a7de749cfd7d
          - subnet-02f8f518e75d79ff5
      Environment:
        Variables:
          ssm_store: /ENV/
      Tags:
        Environment: Dev2
      
  Bucket1:
    Type: 'AWS::S3::Bucket'
  Bucket2:
    Type: 'AWS::S3::Bucket'

  #Version: AddTagToPatientObjects-Function
  ENVAddTagToPatientObjectsVersion:
    Type: Custom::LambdaVersion
    Properties:
      ServiceToken: 
        Fn::GetAtt: LambdaVersion.Arn
      FunctionName: 
        Ref: ENVAddTagToPatientObjects
      Environment: 
        Ref: Environment
      Nonce: <ENV_AddTagToPatientObjects-s3-version>

  ENVAntivirusFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: ENV_AntivirusFunction
      Handler: index.handler
      Runtime: nodejs14.x
      CodeUri:
        Bucket:
          Ref: S3Bucket
        Key: lambdas/ENV_AntivirusFunction.zip
        Version: <ENV_AntivirusFunction-s3-version>
      Description: Jenkins Dev2 Deployment
      MemorySize: 2816
      Timeout: 600
      Role: >-
        arn:aws:iam::491655376147:role/service-role/dev_AntivirusFunction-role-6s3rkh21
      Events:
        BucketEvent1:
          Type: S3
          Properties:
            Bucket:
              Ref: Bucket1
            Events:
              - 's3:ObjectCreated:*'
        SNS1:
          Type: SNS
          Properties:
            Topic:
              Ref: SNSTopic1
      VpcConfig:
        SecurityGroupIds:
          - sg-005a73d593a28e2a0
        SubnetIds:
          - subnet-06a08a7de749cfd7d
          - subnet-02f8f518e75d79ff5
      Environment:
        Variables:
          ssm_store: /ENV/
      Tags:
        Environment: Dev2
      
  Bucket1:
    Type: 'AWS::S3::Bucket'
  SNSTopic1:
    Type: 'AWS::SNS::Topic'

  #Version: AntivirusFunction-Function
  ENVAntivirusFunctionVersion:
    Type: Custom::LambdaVersion
    Properties:
      ServiceToken: 
        Fn::GetAtt: LambdaVersion.Arn
      FunctionName: 
        Ref: ENVAntivirusFunction
      Environment: 
        Ref: Environment
      Nonce: <ENV_AntivirusFunction-s3-version>

  ENVArchiveObjectsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: ENV_ArchiveObjectsFunction
      Handler: index.handler
      Runtime: nodejs14.x
      CodeUri:
        Bucket: 
          Ref: S3Bucket
        Key: lambdas/ENV_ArchiveObjectsFunction.zip
        Version: <ENV_ArchiveObjectsFunction-s3-version>
      Description: Jenkins Dev2 Deployment
      MemorySize: 1024
      Timeout: 300
      Role: 'arn:aws:iam::491655376147:role/dev_SendDataToPatient_FunctionRole'
      VpcConfig:
        SecurityGroupIds:
          - sg-005a73d593a28e2a0
        SubnetIds:
          - subnet-06a08a7de749cfd7d
          - subnet-02f8f518e75d79ff5
      Environment:
        Variables:
          ssm_store: /ENV/
      Tags:
        Environment: Dev2

  ENVArchiveObjectsFunctionVersion:
    Type: Custom::LambdaVersion
    Properties:
      ServiceToken: 
        Fn::GetAtt: LambdaVersion.Arn
      FunctionName: 
        Ref: ENVArchiveObjectsFunction
      Environment: 
        Ref: Environment
      Nonce: <ENV_ArchiveObjectsFunction-s3-version>

  ENVArchiveProcedureFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: ENV_ArchiveProcedureFunction
      Handler: index.handler
      Runtime: nodejs14.x
      CodeUri:
        Bucket: 
          Ref: S3Bucket
        Key: lambdas/ENV_ArchiveProcedureFunction.zip
        Version: <ENV_ArchiveProcedureFunction-s3-version>
      Description: Jenkins Dev2 Deployment
      MemorySize: 1024
      Timeout: 300
      Role: 'arn:aws:iam::491655376147:role/dev_SendDataToPatient_FunctionRole'
      VpcConfig:
        SecurityGroupIds:
          - sg-005a73d593a28e2a0
        SubnetIds:
          - subnet-06a08a7de749cfd7d
          - subnet-02f8f518e75d79ff5
      Environment:
        Variables:
          ssm_store: /ENV/
      Tags:
        Environment: Dev2

  ENVArchiveProcedureFunctionVersion:
    Type: Custom::LambdaVersion
    Properties:
      ServiceToken: 
        Fn::GetAtt: LambdaVersion.Arn
      FunctionName: 
        Ref: ENVArchiveProcedureFunction
      Environment: 
        Ref: Environment
      Nonce: <ENV_ArchiveProcedureFunction-s3-version>
      
  ENVAudioConverterFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: ENV_AudioConverterFunction
      Handler: index.handler
      Runtime: nodejs14.x
      CodeUri:
        Bucket: 
          Ref: S3Bucket
        Key: lambdas/ENV_AudioConverterFunction.zip
        Version: <ENV_AudioConverterFunction-s3-version>
      Description: Jenkins Dev2 Deployment
      MemorySize: 1024
      Timeout: 90
      Role: 'arn:aws:iam::491655376147:role/dev_ThumbnailFunctionRole'
      VpcConfig:
        SecurityGroupIds:
          - sg-005a73d593a28e2a0
        SubnetIds:
          - subnet-06a08a7de749cfd7d
          - subnet-02f8f518e75d79ff5
      Environment:
        Variables:
          ssm_store: /ENV/
      Tags:
        Environment: Dev2

  ENVAudioConverterFunctionVersion:
    Type: Custom::LambdaVersion
    Properties:
      ServiceToken: 
        Fn::GetAtt: LambdaVersion.Arn
      FunctionName: 
        Ref: ENVAudioConverterFunction
      Environment: 
        Ref: Environment
      Nonce: <ENV_AudioConverterFunction-s3-version>

  ENVCloudGroupNotification:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: ENV_CloudGroupNotification
      Handler: index.handler
      Runtime: nodejs14.x
      CodeUri:
        Bucket: 
          Ref: S3Bucket
        Key: lambdas/ENV_CloudGroupNotification.zip
        Version: <ENV_CloudGroupNotification-s3-version>
      Description: Jenkins Dev2 Deployment
      MemorySize: 128
      Timeout: 900
      Role: 'arn:aws:iam::491655376147:role/dev_SendDataToPatient_FunctionRole'
      VpcConfig:
        SecurityGroupIds:
          - sg-005a73d593a28e2a0
        SubnetIds:
          - subnet-06a08a7de749cfd7d
          - subnet-02f8f518e75d79ff5
      Environment:
        Variables:
          ssm_store: /ENV/
      Tags:
        Environment: Dev2

  ENVCloudGroupNotificationVersion:
    Type: Custom::LambdaVersion
    Properties:
      ServiceToken: 
        Fn::GetAtt: LambdaVersion.Arn
      FunctionName: 
        Ref: ENVCloudGroupNotification
      Environment: 
        Ref: Environment
      Nonce: <ENV_CloudGroupNotification-s3-version>

  ENVClearExistingExportZip:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: ENV_ClearExistingExportZip
      Handler: index.handler
      Runtime: nodejs14.x
      CodeUri: 
        Bucket:
          Ref: S3Bucket
        Key: lambdas/ENV_ClearExistingExportZip.zip
        Version: <ENV_ClearExistingExportZip-s3-version>
      Description: Jenkins Dev2 Deployment
      MemorySize: 1664
      Timeout: 600
      Role: 'arn:aws:iam::491655376147:role/dev_ClearExistingExportZip'
      VpcConfig:
        SecurityGroupIds:
          - sg-005a73d593a28e2a0
        SubnetIds:
          - subnet-06a08a7de749cfd7d
          - subnet-02f8f518e75d79ff5
      Environment:
        Variables:
          ssm_store: /ENV/
      Tags:
        Environment: Dev2

  ENVClearExistingExportZipVersion:
    Type: Custom::LambdaVersion
    Properties:
      ServiceToken: 
        Fn::GetAtt: LambdaVersion.Arn
      FunctionName: 
        Ref: ENVClearExistingExportZip
      Environment: 
        Ref: Environment
      Nonce: <ENV_ClearExistingExportZip-S3-version>
  
  ENVCognitoEmailPostConfirmationFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: ENV_CognitoEmailPostConfirmationFunction
      Handler: index.handler
      Runtime: nodejs14.x
      CodeUri: 
        Bucket:
          Ref: S3Bucket
        Key: lambdas/ENV_CognitoEmailPostConfirmationFunction.zip
        Version: <ENV_CognitoEmailPostConfirmationFunction-s3-version>
      Description: Jenkins Dev2 Deployment
      MemorySize: 1792
      Timeout: 300
      Role: 'arn:aws:iam::491655376147:role/dev_CognitoEmailPostConfirmationFunctionRole'
      VpcConfig:
        SecurityGroupIds:
          - sg-005a73d593a28e2a0
        SubnetIds:
          - subnet-06a08a7de749cfd7d
          - subnet-02f8f518e75d79ff5
      Environment:
        Variables:
          ssm_store: /ENV/
      Tags:
        Environment: Dev2

  ENVCognitoEmailPostConfirmationFunctionVersion:
    Type: Custom::LambdaVersion
    Properties:
      ServiceToken: 
        Fn::GetAtt: LambdaVersion.Arn
      FunctionName: 
        Ref: ENVCognitoEmailPostConfirmationFunction
      Environment: 
        Ref: Environment
      Nonce: <ENV_CognitoEmailPostConfirmationFunction-S3-version>

  ENVCognitoPreSignupConfirmation:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: ENV_CognitoPreSignupConfirmation
      Handler: index.handler
      Runtime: nodejs14.x
      CodeUri: 
        Bucket:
          Ref: S3Bucket
        Key: lambdas/ENV_CognitoPreSignupConfirmation.zip
        Version: <ENV_CognitoPreSignupConfirmation-s3-version>
      Description: Jenkins Dev2 Deployment
      MemorySize: 1792
      Timeout: 300
      Role: 'arn:aws:iam::491655376147:role/dev_CognitoEmailPostConfirmationFunctionRole'
      VpcConfig:
        SecurityGroupIds:
          - sg-005a73d593a28e2a0
        SubnetIds:
          - subnet-06a08a7de749cfd7d
          - subnet-02f8f518e75d79ff5
      Environment:
        Variables:
          ssm_store: /ENV/
      Tags:
        Environment: Dev2

  ENVCognitoPreSignupConfirmationVersion:
    Type: Custom::LambdaVersion
    Properties:
      ServiceToken: 
        Fn::GetAtt: LambdaVersion.Arn
      FunctionName: 
        Ref: ENVCognitoPreSignupConfirmation
      Environment: 
        Ref: Environment
      Nonce: <ENV_CognitoPreSignupConfirmation-S3-version>

  ENVCopyRecoveredObjectFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: ENV_CopyRecoveredObjectFunction
      Handler: index.handler
      Runtime: nodejs14.x
      CodeUri:
        Bucket:
          Ref: S3Bucket
        Key: lambdas/ENV_CopyRecoveredObjectFunction.zip
        Version: <ENV_CopyRecoveredObjectFunction-s3-version>
      Description: Jenkins Dev2 Deployment
      MemorySize: 1024
      Timeout: 300
      Role: 'arn:aws:iam::491655376147:role/dev_SendDataToPatient_FunctionRole'
      Events:
        BucketEvent1:
          Type: S3
          Properties:
            Bucket:
              Ref: Bucket1
            Events:
              - !<tag:yaml.org,2002:js/undefined> ''
      VpcConfig:
        SecurityGroupIds:
          - sg-005a73d593a28e2a0
        SubnetIds:
          - subnet-06a08a7de749cfd7d
          - subnet-02f8f518e75d79ff5
      Environment:
        Variables:
          ssm_store: /ENV/
      Tags:
        Environment: Dev2
      
  Bucket1:
    Type: 'AWS::S3::Bucket'

  #Version: CopyRecoveredObjectFunction-Function
  ENVCopyRecoveredObjectFunctionVersion:
    Type: Custom::LambdaVersion
    Properties:
      ServiceToken: 
        Fn::GetAtt: LambdaVersion.Arn
      FunctionName: 
        Ref: ENVCopyRecoveredObjectFunction
      Environment: 
        Ref: Environment
      Nonce: <ENV_CopyRecoveredObjectFunction-s3-version>

  ENVImageConversion:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: ENV_ImageConversion
      Handler: index.handler
      Runtime: nodejs14.x
      CodeUri: 
        Bucket:
          Ref: S3Bucket
        Key: lambdas/ENV_ImageConversion.zip
        Version: <ENV_ImageConversion-s3-version>
      Description: Jenkins Dev2 Deployment
      MemorySize: 1472
      Timeout: 603
      Layers:
        - ffmpeg_custom_layer_arn
      Role: 'arn:aws:iam::491655376147:role/dev_ThumbnailFunctionRole'
      VpcConfig:
        SecurityGroupIds:
          - sg-005a73d593a28e2a0
        SubnetIds:
          - subnet-06a08a7de749cfd7d
          - subnet-02f8f518e75d79ff5
      Environment:
        Variables:
          ssm_store: /ENV/
      Tags:
        Environment: Dev2

  ENVImageConversionVersion:
    Type: Custom::LambdaVersion
    Properties:
      ServiceToken: 
        Fn::GetAtt: LambdaVersion.Arn
      FunctionName: 
        Ref: ENVImageConversion
      Environment: 
        Ref: Environment
      Nonce: <ENV_ImageConversion-S3-version>
  
  # Version Publish Function
  LambdaVersion:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: "index.handler"
      Role: 
        Fn::GetAtt: [LambdaRole, Arn]
      Runtime: nodejs10.x
      InlineCode: |
            var AWS = require('aws-sdk');
            var response = require('cfn-response');
            exports.handler = (event, context) => {
              console.log("Request received:\n", JSON.stringify(event));
              if (event.RequestType == 'Delete') {
                return response.send(event, context, response.SUCCESS);
              }
              // Lambda Versioning
              var lambda = new AWS.Lambda();
              console.log("Before Lambda Version Execution")
              var params = { FunctionName: event.ResourceProperties.FunctionName};
              // [INFO: Publish Version]
              lambda.publishVersion(params).promise().then((data) => {
                console.log("Data:\n", JSON.stringify(data));
                // Lambda Alias
                /*
                1. List All the Aliases Associated with the Function 
                2. Check If the Alias Already Exists !
                3. Create New Alias
                */
                lambda.listAliases(params, function(err, list_alias_data) {
                  if (err) console.log(err, err.stack); 
                  else {
                    console.log(list_alias_data);
                    // 2 . Check If alias Found 
                    alias_found=false;
                    if (list_alias_data && list_alias_data.Aliases) {
                      for (var k in list_alias_data.Aliases) {
                        if (list_alias_data.Aliases[k].Name == event.ResourceProperties.Environment) {
                          alias_found=true;  
                          break;
                        }
                      }
                    } 
                    var alias_params = {
                      FunctionName: event.ResourceProperties.FunctionName,
                      FunctionVersion: data.Version,
                      Name: event.ResourceProperties.Environment
                    };
                    if (alias_found) 
                      lambda.updateAlias(alias_params, function(err, aliasdata) {
                        if (err) console.log(err, err.stack);
                        else     console.log(aliasdata);
                        return response.send(event, context, response.SUCCESS, {Version: data.Version}, data.FunctionArn);
                      });
                    else
                      //create alias
                      lambda.createAlias(alias_params, function(err, aliasdata) {
                        if (err) console.log(err, err.stack);
                        else     console.log(aliasdata);
                        return response.send(event, context, response.SUCCESS, {Version: data.Version}, data.FunctionArn);
                      });
                  }
                });
              }).catch((e) => {
                return response.send(event, context, response.FAILED, e);
              });
            };

