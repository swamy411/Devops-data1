#Parameter Configuration Required to deploy Lambdas:
Parameters:
  S3Bucket:
    Type: String
    Default: "devops-test-swamy1"
  StageName:
    Type: String
    Default: "dev"
  Environment:
    Type: String
    Default: "DEV"
  Bucket1:
    Type: String
    Default: dev-addtag-bucket1
  Bucket2:
    Type: String
    Default: dev-addtag-bucket2

Resources:
  #IAM Role Required for Lambdas to function Properly
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:     
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: PublishVersion
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action: ['lambda:PublishVersion', 'lambda:CreateAlias', 'lambda:GetAlias', 'lambda:ListAliases', 'lambda:UpdateAlias']
              Resource: '*'
            - Effect: Allow
              Action:
                - s3:Get*
              Resource: '*'
  
  #Function-CognitoPreSignupConfirmation
  devCognitoPreSignupConfirmation:
    Type: 'AWS::Lambda::Function'
    DependsOn: LambdaRole
    Properties:
      Description: dev cognitoPreSignupConfirmation function 
      FunctionName: dev_CognitoPreSignupConfirmation
      Code:
        S3Bucket:
          Ref: S3Bucket
        S3Key: lambdas/dev_CognitoPreSignupConfirmation.zip
        S3ObjectVersion: <dev_CognitoPreSignupConfirmation-s3-version>
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 1024
      Timeout: 300
      Role:
        Fn::GetAtt: [LambdaRole, Arn]

  #Version: devCognitoPreSignupConfirmation-Function
  devCognitoPreSignupConfirmationVersion:
    Type: Custom::LambdaVersion
    Properties:
      ServiceToken: 
        Fn::GetAtt: LambdaVersion.Arn
      FunctionName: 
        Ref: devCognitoPreSignupConfirmation
      Environment: 
        Ref: Environment
      Nonce: <dev_CognitoPreSignupConfirmation-s3-version>

    #Function-ClearExistingExportZip
  devClearExistingExportZip:
    Type: 'AWS::Lambda::Function'
    DependsOn: LambdaRole
    Properties:
      Description: dev cognitoPreSignupConfirmation function 
      FunctionName: dev_ClearExistingExportZip
      Code:
        S3Bucket:
          Ref: S3Bucket
        S3Key: lambdas/dev_ClearExistingExportZip.zip
        S3ObjectVersion: <dev_ClearExistingExportZip-s3-version>
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 1664
      Timeout: 600
      Role:
        Fn::GetAtt: [LambdaRole, Arn]

  #Version: devClearExistingExportZip-Function
  devClearExistingExportZipVersion:
    Type: Custom::LambdaVersion
    Properties:
      ServiceToken: 
        Fn::GetAtt: LambdaVersion.Arn
      FunctionName: 
        Ref: devClearExistingExportZip
      Environment: 
        Ref: Environment
      Nonce: <dev_ClearExistingExportZip-s3-version>
  
  #Function-devAddTagToPatientObjects
  devAddTagToPatientObjects:
    Type: 'AWS::Lambda::Function'
    DependsOn: LambdaRole
    Properties:
      Description: dev AddTagToPatientObjects function 
      FunctionName: dev_AddTagToPatientObjects
      Code:
        S3Bucket:
          Ref: S3Bucket
        S3Key: lambdas/dev_AddTagToPatientObjects.zip
        S3ObjectVersion: <dev_AddTagToPatientObjects-s3-version>
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 1024
      Timeout: 300
      Role:
        Fn::GetAtt: [LambdaRole, Arn]

  #Version: devAddTagToPatientObjects-Function
  devAddTagToPatientObjectsVersion:
    Type: Custom::LambdaVersion
    Properties:
      ServiceToken: 
        Fn::GetAtt: LambdaVersion.Arn
      FunctionName: 
        Ref: devAddTagToPatientObjects
      Environment: 
        Ref: Environment
      Nonce: <dev_AddTagToPatientObjects-s3-version>

  BucketEvent1:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref Bucket1
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt devAddTagToPatientObjects.Arn

  BucketEvent2:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref Bucket2
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt devAddTagToPatientObjects.Arn
  
  LambdaInvokePermission1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt devAddTagToPatientObjects.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${Bucket1}'
      
  LambdaInvokePermission2:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt devAddTagToPatientObjects.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${Bucket2}'


  #Function-devCloudGroupNotification
  devCloudGroupNotification:
    Type: 'AWS::Lambda::Function'
    DependsOn: LambdaRole
    Properties:
      Description: dev CloudGroupNotification function 
      FunctionName: dev_CloudGroupNotification
      Code:
        S3Bucket:
          Ref: S3Bucket
        S3Key: lambdas/dev_CloudGroupNotification.zip
        S3ObjectVersion: <dev_CloudGroupNotification-s3-version>
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 900
      Role:
        Fn::GetAtt: [LambdaRole, Arn]

  #Version: devCloudGroupNotification-Function
  devCloudGroupNotificationVersion:
    Type: Custom::LambdaVersion
    Properties:
      ServiceToken: 
        Fn::GetAtt: LambdaVersion.Arn
      FunctionName: 
        Ref: devCloudGroupNotification
      Environment: 
        Ref: Environment
      Nonce: <dev_CloudGroupNotification-s3-version>

  #Function-devArchiveObjectsFunction
  devArchiveObjectsFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: LambdaRole
    Properties:
      Description: dev ArchiveObjectsFunction function 
      FunctionName: dev_ArchiveObjectsFunction
      Code:
        S3Bucket:
          Ref: S3Bucket
        S3Key: lambdas/dev_ArchiveObjectsFunction.zip
        S3ObjectVersion: <dev_ArchiveObjectsFunction-s3-version>
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 1024
      Timeout: 300
      Role:
        Fn::GetAtt: [LambdaRole, Arn]

  #Version: devArchiveObjectsFunction-Function
  devArchiveObjectsFunctionVersion:
    Type: Custom::LambdaVersion
    Properties:
      ServiceToken: 
        Fn::GetAtt: LambdaVersion.Arn
      FunctionName: 
        Ref: devArchiveObjectsFunction
      Environment: 
        Ref: Environment
      Nonce: <dev_ArchiveObjectsFunction-s3-version>

  #Function-devAudioConverterFunction
  devAudioConverterFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: LambdaRole
    Properties:
      Description: dev AudioConverterFunction function 
      FunctionName: dev_AudioConverterFunction
      Code:
        S3Bucket:
          Ref: S3Bucket
        S3Key: lambdas/dev_AudioConverterFunction.zip
        S3ObjectVersion: <dev_AudioConverterFunction-s3-version>
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 1024
      Timeout: 90
      Role:
        Fn::GetAtt: [LambdaRole, Arn]

  #Version: devAudioConverterFunction-Function
  devAudioConverterFunctionVersion:
    Type: Custom::LambdaVersion
    Properties:
      ServiceToken: 
        Fn::GetAtt: LambdaVersion.Arn
      FunctionName: 
        Ref: devAudioConverterFunction
      Environment: 
        Ref: Environment
      Nonce: <dev_AudioConverterFunction-s3-version>

  #Function-devCognitoEmailPostConfirmationFunction
  devCognitoEmailPostConfirmationFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: LambdaRole
    Properties:
      Description: dev CognitoEmailPostConfirmationFunction function 
      FunctionName: dev_CognitoEmailPostConfirmationFunction
      Code:
        S3Bucket:
          Ref: S3Bucket
        S3Key: lambdas/dev_CognitoEmailPostConfirmationFunction.zip
        S3ObjectVersion: <dev_CognitoEmailPostConfirmationFunction-s3-version>
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 1216
      Timeout: 360
      Role:
        Fn::GetAtt: [LambdaRole, Arn]

  #Version: devCognitoEmailPostConfirmationFunction-Function
  devCognitoEmailPostConfirmationFunctionVersion:
    Type: Custom::LambdaVersion
    Properties:
      ServiceToken: 
        Fn::GetAtt: LambdaVersion.Arn
      FunctionName: 
        Ref: devCognitoEmailPostConfirmationFunction
      Environment: 
        Ref: Environment
      Nonce: <dev_CognitoEmailPostConfirmationFunction-s3-version>

  #Function-devCognitoSubscriptionMappingPostConfirmationFunction
  devCognitoSubscriptionMappingPostConfirmationFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: LambdaRole
    Properties:
      Description: dev CognitoSubscriptionMappingPostConfirmationFunction function 
      FunctionName: dev_CognitoSubscriptionMappingPostConfirmationFunction
      Code:
        S3Bucket:
          Ref: S3Bucket
        S3Key: lambdas/dev_CognitoSubscriptionMappingPostConfirmationFunction.zip
        S3ObjectVersion: <dev_CognitoSubscriptionMappingPostConfirmationFunction-s3-version>
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 512
      Timeout: 300
      Role:
        Fn::GetAtt: [LambdaRole, Arn]

  #Version: devCognitoSubscriptionMappingPostConfirmationFunction-Function
  devCognitoSubscriptionMappingPostConfirmationFunctionVersion:
    Type: Custom::LambdaVersion
    Properties:
      ServiceToken: 
        Fn::GetAtt: LambdaVersion.Arn
      FunctionName: 
        Ref: devCognitoSubscriptionMappingPostConfirmationFunction
      Environment: 
        Ref: Environment
      Nonce: <dev_CognitoSubscriptionMappingPostConfirmationFunction-s3-version>

  #Function-devArchiveProcedureFunction
  devArchiveProcedureFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: LambdaRole
    Properties:
      Description: dev ArchiveProcedureFunction function 
      FunctionName: dev_ArchiveProcedureFunction
      Code:
        S3Bucket:
          Ref: S3Bucket
        S3Key: lambdas/dev_ArchiveProcedureFunction.zip
        S3ObjectVersion: <dev_ArchiveProcedureFunction-s3-version>
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 1024
      Timeout: 300
      Role:
        Fn::GetAtt: [LambdaRole, Arn]

  #Version: devArchiveProcedureFunction-Function
  devArchiveProcedureFunctionVersion:
    Type: Custom::LambdaVersion
    Properties:
      ServiceToken: 
        Fn::GetAtt: LambdaVersion.Arn
      FunctionName: 
        Ref: devArchiveProcedureFunction
      Environment: 
        Ref: Environment
      Nonce: <dev_ArchiveProcedureFunction-s3-version>

  #Function-devArchiveProcedureProcedureID
  devArchiveProcedureProcedureID:
    Type: 'AWS::Lambda::Function'
    DependsOn: LambdaRole
    Properties:
      Description: dev ArchiveProcedureProcedureID function 
      FunctionName: dev_ArchiveProcedure__ProcedureID
      Code:
        S3Bucket:
          Ref: S3Bucket
        S3Key: lambdas/dev_ArchiveProcedure__ProcedureID.zip
        S3ObjectVersion: <dev_ArchiveProcedure__ProcedureID-s3-version>
      Handler: index.handler
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 900
      Role:
        Fn::GetAtt: [LambdaRole, Arn]

  #Version: devArchiveProcedureProcedureID-Function
  devArchiveProcedureProcedureIDVersion:
    Type: Custom::LambdaVersion
    Properties:
      ServiceToken: 
        Fn::GetAtt: LambdaVersion.Arn
      FunctionName: 
        Ref: devArchiveProcedureProcedureID
      Environment: 
        Ref: Environment
      Nonce: <dev_ArchiveProcedure__ProcedureID-s3-version>
  
  # Create API Gateway API
  ApiGatewayRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub ${StageName}-${AWS::StackName}
      EndpointConfiguration:
        Types:
          - REGIONAL 
      Body:
        openapi: 3.0.0
        info:
          title: !Sub ${AWS::StackName} API
          version: 1.0.0
        paths:
          /MyResource:
            any:
              parameters:
                - name: Content-Type
                  in: header
                  schema:
                    type: string
              x-amazon-apigateway-integration:
                type: AWS_PROXY
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${devArchiveProcedureProcedureID.Arn}/invocations
                httpMethod: POST
                requestParameters: {}
                credentials: !GetAtt ApiInvokeFunctionRole.Arn
              responses: 
                "200":
                  description: Success
  # Deploy current API version to a stage with name of the environment   
  ApiGatewayRestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties: 
      Description: ApiGatewayRestApi Deployment
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref StageName
  # Role which enables the API to call all Lambda functions
  ApiInvokeFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: "apigateway.amazonaws.com"
          Action: "sts:AssumeRole"
      Policies:
      - PolicyName: ApiInvokeFunctionRolePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - "lambda:InvokeFunction"
            Resource:
            - !GetAtt devArchiveProcedureProcedureID.Arn

  # Version Publish Function
  LambdaVersion:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.handler"
      Role: 
        Fn::GetAtt: [LambdaRole, Arn]
      Runtime: nodejs10.x
      Code:
        ZipFile: 
          Fn::Sub: |
            var AWS = require('aws-sdk');
            var response = require('cfn-response');
            exports.handler = (event, context) => {
              console.log("Request received:\n", JSON.stringify(event));
              if (event.RequestType == 'Delete') {
                return response.send(event, context, response.SUCCESS);
              }
              // Lambda Versioning
              var lambda = new AWS.Lambda();
              console.log("Before Lambda Version Execution")
              var params = { FunctionName: event.ResourceProperties.FunctionName};
              // [INFO: Publish Version]
              lambda.publishVersion(params).promise().then((data) => {
                console.log("Data:\n", JSON.stringify(data));
                // Lambda Alias
                /*
                1. List All the Aliases Associated with the Function 
                2. Check If the Alias Already Exists !
                3. Create New Alias
                */
                lambda.listAliases(params, function(err, list_alias_data) {
                  if (err) console.log(err, err.stack); 
                  else {
                    console.log(list_alias_data);
                    // 2 . Check If alias Found 
                    alias_found=false;
                    if (list_alias_data && list_alias_data.Aliases) {
                      for (var k in list_alias_data.Aliases) {
                        if (list_alias_data.Aliases[k].Name == event.ResourceProperties.Environment) {
                          alias_found=true;  
                          break;
                        }
                      }
                    } 
                    var alias_params = {
                      FunctionName: event.ResourceProperties.FunctionName,
                      FunctionVersion: data.Version,
                      Name: event.ResourceProperties.Environment
                    };
                    if (alias_found) 
                      lambda.updateAlias(alias_params, function(err, aliasdata) {
                        if (err) console.log(err, err.stack);
                        else     console.log(aliasdata);
                        return response.send(event, context, response.SUCCESS, {Version: data.Version}, data.FunctionArn);
                      });
                    else
                      //create alias
                      lambda.createAlias(alias_params, function(err, aliasdata) {
                        if (err) console.log(err, err.stack);
                        else     console.log(aliasdata);
                        return response.send(event, context, response.SUCCESS, {Version: data.Version}, data.FunctionArn);
                      });
                  }
                });
              }).catch((e) => {
                return response.send(event, context, response.FAILED, e);
              });
            };

