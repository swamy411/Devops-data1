AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: This is jenkins deployement
#Parameter Configuration Required to deploy Lambdas:
Parameters:
  STAGE:
    Type: String
    Default: dev
  3Bucket:
    Type: String
    Default: "devops-test-swamy1"
  Environment:
    Type: String
    Default: "DEV"
Resources:
#IAM Role Required for Lambdas to function Properly
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:     
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: PublishVersion
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action: ['lambda:PublishVersion', 'lambda:CreateAlias', 'lambda:GetAlias', 'lambda:ListAliases', 'lambda:UpdateAlias']
              Resource: '*'
            - Effect: Allow
              Action:
                - s3:Get*
              Resource: '*'

  devAddTagToPatientObjects:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: dev-AddTagToPatientObjects
      Handler: index.handler
      Runtime: nodejs10.x
      CodeUri:
        Bucket: devops-test-swamy1
        Key: lambdas/dev_AddTagToPatientObjects.zip
        Version: <dev_AddTagToPatientObjects-s3-version>
      Description: This is jenkins deployement
      MemorySize: 1024
      Timeout: 300
      Role: 
        Fn::GetAtt: [LambdaRole, Arn]
      Events:
        BucketEvent1:
          Type: S3
          Properties:
            Bucket:
              Ref: Bucket1
            Events:
              - 's3:ObjectCreated:*'
        BucketEvent2:
          Type: S3
          Properties:
            Bucket:
              Ref: Bucket2
            Events:
              - 's3:ObjectCreated:*'
      Environment:
        Variables:
          ssm_store: /dev/
      Tags:
        Environment: Dev
      # VpcConfig:
      #   SecurityGroupIds:
      #     - sg-005a73d593a28e2a0
      #   SubnetIds:
      #     - subnet-06a08a7de749cfd7d
      #     - subnet-02f8f518e75d79ff5
      

  Bucket1:
    Type: 'AWS::S3::Bucket'
  Bucket2:
    Type: 'AWS::S3::Bucket'

  #Version: devAddTagToPatientObjects-Function
  devAddTagToPatientObjectsVersion:
    Type: Custom::LambdaVersion
    Properties:
      ServiceToken: 
        Fn::GetAtt: LambdaVersion.Arn
      FunctionName: 
        Ref: devAddTagToPatientObjects
      Environment: 
        Ref: Environment
      Nonce: <dev_AddTagToPatientObjects-s3-version>

  devCloudGroupNotification:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: dev-CloudGroupNotification
      Handler: index.handler
      Runtime: nodejs10.x
      CodeUri:
        Bucket: devops-test-swamy1
        Key: lambdas/dev_CloudGroupNotification.zip
        Version: <dev_CloudGroupNotification-s3-version>
      Description: ''
      MemorySize: 128
      Timeout: 900
      Role: 
        Fn::GetAtt: [LambdaRole, Arn]
      Environment:
        Variables:
          ssm_store: /dev/

    devCloudGroupNotificationVersion:
      Type: Custom::LambdaVersion
      Properties:
        ServiceToken: 
          Fn::GetAtt: LambdaVersion.Arn
        FunctionName: 
          Ref: devCloudGroupNotification
        Environment: 
          Ref: Environment
        Nonce: <dev_CloudGroupNotification-s3-version>
 

  # Version Publish Function
  LambdaVersion:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: "index.handler"
      Role: 
        Fn::GetAtt: [LambdaRole, Arn]
      Runtime: nodejs10.x
      InlineCode: |
            var AWS = require('aws-sdk');
            var response = require('cfn-response');
            exports.handler = (event, context) => {
              console.log("Request received:\n", JSON.stringify(event));
              if (event.RequestType == 'Delete') {
                return response.send(event, context, response.SUCCESS);
              }
              // Lambda Versioning
              var lambda = new AWS.Lambda();
              console.log("Before Lambda Version Execution")
              var params = { FunctionName: event.ResourceProperties.FunctionName};
              // [INFO: Publish Version]
              lambda.publishVersion(params).promise().then((data) => {
                console.log("Data:\n", JSON.stringify(data));
                // Lambda Alias
                /*
                1. List All the Aliases Associated with the Function 
                2. Check If the Alias Already Exists !
                3. Create New Alias
                */
                lambda.listAliases(params, function(err, list_alias_data) {
                  if (err) console.log(err, err.stack); 
                  else {
                    console.log(list_alias_data);
                    // 2 . Check If alias Found 
                    alias_found=false;
                    if (list_alias_data && list_alias_data.Aliases) {
                      for (var k in list_alias_data.Aliases) {
                        if (list_alias_data.Aliases[k].Name == event.ResourceProperties.Environment) {
                          alias_found=true;  
                          break;
                        }
                      }
                    } 
                    var alias_params = {
                      FunctionName: event.ResourceProperties.FunctionName,
                      FunctionVersion: data.Version,
                      Name: event.ResourceProperties.Environment
                    };
                    if (alias_found) 
                      lambda.updateAlias(alias_params, function(err, aliasdata) {
                        if (err) console.log(err, err.stack);
                        else     console.log(aliasdata);
                        return response.send(event, context, response.SUCCESS, {Version: data.Version}, data.FunctionArn);
                      });
                    else
                      //create alias
                      lambda.createAlias(alias_params, function(err, aliasdata) {
                        if (err) console.log(err, err.stack);
                        else     console.log(aliasdata);
                        return response.send(event, context, response.SUCCESS, {Version: data.Version}, data.FunctionArn);
                      });
                  }
                });
              }).catch((e) => {
                return response.send(event, context, response.FAILED, e);
              });
            };

